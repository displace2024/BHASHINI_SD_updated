# Running on compute-0-3.local
# Started at Sat Feb 11 19:04:17 IST 2023
# nnet3-info exp/displace_dev_sad_tdnn_stats/5.raw && nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/4.raw exp/displace_dev_sad_tdnn_stats/5.raw 
nnet3-info exp/displace_dev_sad_tdnn_stats/5.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.001715, bias-{mean,stddev}=0.004393,0.07185
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00112853, max-change=0.75, linear-params-rms=0.07049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.88,0.89,0.91 0.92,0.95,1.0,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.996, stddev=0.0509], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.12, stddev=0.048], bias-{mean,stddev}=-0.08006,0.9365, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.52e+06, self-repaired-proportion=0.935621, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,2e-05,0.69,1.2 1.5,2.1,2.1,2.6), mean=0.335, stddev=0.544], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.454, stddev=0.489], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.003,0.01,0.02 0.02,0.03,0.03,0.05), mean=0.0069, stddev=0.00741], oderiv-count=1.41962e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00112853, max-change=0.75, linear-params-rms=0.03309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.96 0.98,0.99,1.0,1.1,1.2 1.3,1.4,1.6,1.8), mean=1.05, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.46 0.47,0.48,0.51,0.56,0.60 0.63,0.70,0.79,0.99), mean=0.524, stddev=0.0642], bias-{mean,stddev}=-0.01716,0.9794, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.52e+05, self-repaired-proportion=0.156378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.006 0.008,0.02,0.10,0.32,0.62 0.84,1.1,1.7,4.7), mean=0.23, stddev=0.415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.09,0.12,0.29,0.60,0.79 0.90,0.95,0.98,1.0), mean=0.364, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.003,0.005 0.008,0.009,0.01,0.02), mean=0.00298, stddev=0.00216], oderiv-count=413568
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00112853, max-change=0.75, linear-params-rms=0.03107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.96 0.96,0.97,0.99,1.0,1.0 1.0,1.0,1.1,1.1), mean=0.994, stddev=0.0242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.46 0.47,0.48,0.49,0.51,0.52 0.54,0.55,0.56,0.62), mean=0.496, stddev=0.024], bias-{mean,stddev}=0.03683,0.9208, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.27e+05, self-repaired-proportion=0.0738698, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.05,0.08,0.24,0.70,1.0 1.4,1.7,2.0,3.1), mean=0.424, stddev=0.471], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.14 0.17,0.24,0.43,0.74,0.82 0.88,0.93,0.94,0.97), mean=0.48, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.001,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.004,0.004,0.005), mean=0.00155, stddev=0.000668], oderiv-count=505728
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00112853, max-change=0.75, linear-params-rms=0.02786, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.0,1.1,1.1), mean=0.997, stddev=0.025], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.41 0.42,0.43,0.44,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.444, stddev=0.0203], bias-{mean,stddev}=-0.04712,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.26e+05, self-repaired-proportion=0.0922399, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.09,0.31,0.98,1.3 1.7,1.9,2.4,2.6), mean=0.522, stddev=0.542], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.10,0.12 0.18,0.23,0.47,0.78,0.88 0.92,0.96,0.99,1.0), mean=0.503, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.002,0.003 0.003,0.005,0.005,0.006), mean=0.002, stddev=0.000833], oderiv-count=300000
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00112853, max-change=0.75, linear-params-rms=0.02773, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.96 0.96,0.97,0.99,1.0,1.0 1.0,1.1,1.1,1.2), mean=0.992, stddev=0.0267], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.42,0.43,0.44,0.46,0.47 0.48,0.49,0.49,0.51), mean=0.443, stddev=0.0204], bias-{mean,stddev}=-0.07473,0.8839, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.7e+04, self-repaired-proportion=0.323085, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-06,2e-05,0.007 0.01,0.03,0.19,1.1,1.9 2.7,3.3,3.8,5.6), mean=0.624, stddev=0.916], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0001,0.0003,0.04 0.07,0.11,0.39,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.481, stddev=0.358], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-10,4e-06,5e-05,0.0004 0.0005,0.001,0.002,0.005,0.007 0.009,0.01,0.02,0.03), mean=0.00321, stddev=0.00354], oderiv-count=92288
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000112853, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.01949, linear-params-row-norms=[ 0.28 0.33 0.33 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-09,3e-05,0.0002,0.0007 0.002,0.003,0.01,0.04,0.06 0.07,0.09,0.11,0.13), mean=0.0228, stddev=0.0249], bias-{mean,stddev}=-1.242e-09,0.01632, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.25 0.97 0 ], oderiv-count=94976
nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/4.raw exp/displace_dev_sad_tdnn_stats/5.raw 
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.38718 tdnn2.affine:1.0181 tdnn3.affine:0.543003 tdnn4.affine:0.598466 tdnn5.affine:0.811458 output.affine:0.0817499 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:21.8779 tdnn2.affine:23.0344 tdnn3.affine:21.6468 tdnn4.affine:23.3492 tdnn5.affine:21.2961 output.affine:0.540788 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.017641 tdnn2.affine:0.0444268 tdnn3.affine:0.0250962 tdnn4.affine:0.0256498 tdnn5.affine:0.0381018 output.affine:0.158 ]
# Accounting: time=0 threads=1
# Finished at Sat Feb 11 19:04:17 IST 2023 with status 0
