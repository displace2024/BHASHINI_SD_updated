# Running on compute-0-1.local
# Started at Sat Feb 11 19:24:16 IST 2023
# nnet3-info --verbose=2 exp/displace_dev_sad_tdnn_stats/40.raw 
nnet3-info --verbose=2 exp/displace_dev_sad_tdnn_stats/40.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.001715, bias-{mean,stddev}=0.004393,0.07185
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.08409, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.92 0.95,0.98,1.1,1.3,1.4 1.5,1.6,1.7,3.4), mean=1.16, stddev=0.26], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.3,1.4,1.5 1.6,1.7,1.7,1.9), mean=1.34, stddev=0.135], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.25 0.33,0.49,1.0,1.6,1.9 2.1,3.3,3.7,5.4), mean=1.12, stddev=0.74], bias-{mean,stddev}=-0.06923,0.793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.53e+06, self-repaired-proportion=0.765184, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.50,0.97 1.3,1.8,1.9,2.5), mean=0.261, stddev=0.466], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.439, stddev=0.471], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0188, stddev=0.0177], oderiv-count=1.57658e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.05525, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,1.0,1.0 1.0,1.1,1.2,1.9,2.7 3.3,4.2,5.0,5.3), mean=1.56, stddev=0.828], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.52,1.1,1.3 1.5,1.8,2.0,2.7), mean=0.793, stddev=0.388], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.56,0.60 0.66,0.75,1.0,1.3,1.5 2.0,4.3,7.8,14), mean=1.24, stddev=1.26], bias-{mean,stddev}=-0.01721,0.9794, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=4.92e+05, self-repaired-proportion=0.0214818, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.007,0.008 0.01,0.02,0.07,0.34,0.71 1.5,2.7,4.4,5.6), mean=0.326, stddev=0.755], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.09,0.13,0.23,0.59,0.79 0.89,0.93,0.94,0.96), mean=0.332, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.005,0.008 0.01,0.01,0.02,0.02), mean=0.00361, stddev=0.00325], oderiv-count=506880
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.03486, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.98,0.98 1.0,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.7), mean=1.11, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.47 0.48,0.49,0.51,0.57,0.64 0.76,0.94,1.0,1.5), mean=0.545, stddev=0.111], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.55,0.59 0.65,0.73,0.98,1.2,1.4 1.6,2.2,2.8,3.4), mean=1.04, stddev=0.404], bias-{mean,stddev}=0.03723,0.9207, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=4.71e+05, self-repaired-proportion=0.00326606, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.06,0.12,0.52,1.2,1.7 2.6,3.4,4.2,5.3), mean=0.795, stddev=0.878], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.09 0.11,0.19,0.48,0.73,0.84 0.88,0.90,0.91,0.93), mean=0.473, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.003,0.004 0.004,0.005,0.006,0.007), mean=0.00201, stddev=0.00108], oderiv-count=470016
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.03189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.98,0.98,0.99 1.0,1.0,1.1,1.2,1.3 1.4,1.5,1.6,1.9), mean=1.13, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.48,0.55,0.61 0.66,0.74,0.79,0.98), mean=0.503, stddev=0.0771], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.64 0.69,0.77,0.99,1.3,1.4 1.7,2.2,2.8,3.6), mean=1.07, stddev=0.406], bias-{mean,stddev}=-0.04708,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.57e+05, self-repaired-proportion=0.00415864, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.05,0.13,0.53,1.5,1.9 2.2,2.5,2.5,3.0), mean=0.807, stddev=0.733], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.10,0.17,0.48,0.76,0.85 0.89,0.91,0.91,0.93), mean=0.474, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.003,0.003,0.005 0.005,0.007,0.008,0.01), mean=0.003, stddev=0.00151], oderiv-count=326400
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000796327, max-change=0.75, linear-params-rms=0.03191, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 0.98,0.99,1.0,1.2,1.4 1.6,1.8,1.9,2.1), mean=1.12, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.49,0.56,0.60 0.64,0.71,0.74,0.97), mean=0.505, stddev=0.0723], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.60,0.63 0.68,0.77,0.99,1.3,1.4 1.7,2.2,2.7,3.8), mean=1.07, stddev=0.412], bias-{mean,stddev}=-0.07483,0.8846, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.72e+04, self-repaired-proportion=0.0786969, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.05,0.39,1.3,2.0 2.6,3.1,3.5,7.4), mean=0.766, stddev=0.962], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.08,0.13,0.41,0.88,0.92 0.95,1.0,1.0,1.0), mean=0.477, stddev=0.326], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0002,0.0004,0.0006 0.001,0.002,0.005,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.00646, stddev=0.00562], oderiv-count=96768
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=7.96327e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.03776, linear-params-row-norms=[ 0.67 0.69 0.41 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.002,0.003,0.005 0.008,0.02,0.05,0.09,0.11 0.13,0.15,0.17,0.18), mean=0.0525, stddev=0.0389], linear-params-singular-values=[ 0.92 0.51 8e-06 ], bias-{mean,stddev}=-7.097e-07,0.03497, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.25 0.97 0 ], oderiv-count=89958.4
# Accounting: time=0 threads=1
# Finished at Sat Feb 11 19:24:16 IST 2023 with status 0
