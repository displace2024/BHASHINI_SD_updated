# Running on compute-0-3.local
# Started at Sat Feb 11 19:55:31 IST 2023
# nnet3-show-progress --use-gpu=no --verbose=2 exp/displace_dev_sad_tdnn_stats/99.raw exp/displace_dev_sad_tdnn_stats/100.raw 
nnet3-show-progress --use-gpu=no --verbose=2 exp/displace_dev_sad_tdnn_stats/99.raw exp/displace_dev_sad_tdnn_stats/100.raw 
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.001715, bias-{mean,stddev}=0.004393,0.07185
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000298726, max-change=0.75, linear-params-rms=0.0006638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,3e-05,3e-05,3e-05 3e-05,3e-05,0.001,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.00643, stddev=0.00684], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.04), mean=0.0103, stddev=0.00246], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,6e-08 8e-08,5e-05,0.002,0.01,0.02 0.02,0.03,0.04,0.05), mean=0.00621, stddev=0.00859], bias-{mean,stddev}=-5.065e-05,0.001182, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.75e+05, self-repaired-proportion=0.711249, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2e-08,-2e-09,0,0 0,0,0.002,0.42,0.87 1.2,1.7,1.7,2.4), mean=0.229, stddev=0.426], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2e-05,-1e-06,0,0 0,0,0.11,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.434, stddev=0.457], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.008,0.06,0.07 0.08,0.09,0.10,0.13), mean=0.0328, stddev=0.0302], oderiv-count=256949
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000298726, max-change=0.75, linear-params-rms=0.0006959, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.005 0.006,0.008,0.02,0.03,0.04 0.04,0.05,0.05,0.05), mean=0.0186, stddev=0.0122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.02,0.02 0.02,0.02,0.02,0.04), mean=0.00752, stddev=0.00818], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0006,0.0008 0.001,0.002,0.005,0.02,0.03 0.05,0.06,0.08,0.17), mean=0.0118, stddev=0.0189], bias-{mean,stddev}=1.15e-06,6.226e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0007,0.002,0.002 0.002,0.003,0.003,0.007,0.01 0.02,0.02,0.02,0.03), mean=0.00542, stddev=0.00475], oderiv-count=39552
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000298726, max-change=0.75, linear-params-rms=0.000379, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.005,0.007,0.01,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0113, stddev=0.00445], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0006,0.0008 0.001,0.001,0.003,0.008,0.01 0.01,0.02,0.02,0.02), mean=0.00457, stddev=0.00397], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0007,0.0008 0.001,0.001,0.004,0.01,0.02 0.03,0.04,0.04,0.05), mean=0.00756, stddev=0.00949], bias-{mean,stddev}=3.983e-06,6.157e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.37e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.002,0.02,0.04 0.07,0.16,0.59,1.4,1.8 3.2,3.7,4.1,5.3), mean=0.899, stddev=0.938], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.09 0.14,0.21,0.43,0.66,0.76 0.80,0.86,0.89,0.95), mean=0.439, stddev=0.226], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.001 0.001,0.002,0.003,0.004,0.005 0.005,0.006,0.007,0.008), mean=0.00288, stddev=0.00142], oderiv-count=44928
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000298726, max-change=0.75, linear-params-rms=0.0005228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.006,0.007 0.009,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0177, stddev=0.00595], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.002,0.003,0.007,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.0074, stddev=0.00387], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.003,0.004,0.009,0.02,0.03 0.04,0.05,0.06,0.07), mean=0.0134, stddev=0.0131], bias-{mean,stddev}=4.263e-06,5.63e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.87e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.39,-0.20,-0.05,-0.02 0.05,0.13,0.55,1.5,1.9 2.4,2.9,3.1,5.3), mean=0.817, stddev=0.834], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,-0.02,0.01,0.05 0.12,0.19,0.41,0.69,0.81 0.90,0.99,1.0,1.1), mean=0.442, stddev=0.266]
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000298726, max-change=0.75, linear-params-rms=0.0007496, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.001,0.003 0.005,0.007,0.02,0.04,0.04 0.05,0.06,0.06,0.06), mean=0.0221, stddev=0.0152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.002,0.002,0.003 0.004,0.006,0.01,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0108, stddev=0.00519], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0003,0.0005,0.001 0.001,0.003,0.01,0.03,0.05 0.06,0.08,0.09,0.09), mean=0.018, stddev=0.0199], bias-{mean,stddev}=1.019e-05,5.564e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.11e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.02 0.04,0.09,0.38,1.0,1.3 1.5,2.0,2.5,3.7), mean=0.574, stddev=0.571], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.06,0.07 0.11,0.16,0.39,0.65,0.73 0.86,0.91,0.93,1.0), mean=0.412, stddev=0.245]
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=2.98726e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.0008568, linear-params-row-norms=[ 0.02 0.02 0.003 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,3e-05,5e-05,0.0001 0.0002,0.0003,0.0008,0.002,0.002 0.003,0.003,0.004,0.006), mean=0.00113, stddev=0.000966], linear-params-singular-values=[ 0.02 0.003 1e-07 ], bias-{mean,stddev}=3.725e-09,0.000442, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3

LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.1511 tdnn2.affine:0.355593 tdnn3.affine:0.193694 tdnn4.affine:0.298809 tdnn5.affine:0.429261 output.affine:0.023757 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.1645 tdnn2.affine:40.0054 tdnn3.affine:25.4393 tdnn4.affine:27.5551 tdnn5.affine:26.3673 output.affine:2.00669 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.00601029 tdnn2.affine:0.0089 tdnn3.affine:0.00762216 tdnn4.affine:0.0108573 tdnn5.affine:0.0163022 output.affine:0.0119267 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:PrintProfile():cu-device.cc:563) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Finished at Sat Feb 11 19:55:31 IST 2023 with status 0
