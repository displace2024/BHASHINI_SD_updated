# Running on compute-0-0.local
# Started at Sat Feb 11 19:02:19 IST 2023
# nnet3-info exp/displace_dev_sad_tdnn_stats/2.raw && nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/1.raw exp/displace_dev_sad_tdnn_stats/2.raw 
nnet3-info exp/displace_dev_sad_tdnn_stats/2.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.001715, bias-{mean,stddev}=0.004393,0.07185
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00118172, max-change=0.75, linear-params-rms=0.07023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.88,0.89,0.91 0.92,0.95,0.99,1.0,1.0 1.1,1.1,1.1,1.1), mean=0.992, stddev=0.0496], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.0 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.2), mean=1.12, stddev=0.0474], bias-{mean,stddev}=-0.08206,0.9602, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.8e+06, self-repaired-proportion=0.964814, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,1e-06,0.73,1.3 1.5,2.1,2.2,2.7), mean=0.348, stddev=0.557], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0002,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.453, stddev=0.491], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.004,0.01,0.01 0.02,0.02,0.03,0.04), mean=0.00666, stddev=0.00626], oderiv-count=1.41787e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00118172, max-change=0.75, linear-params-rms=0.03203, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.96 0.97,0.98,1.0,1.0,1.1 1.2,1.2,1.3,1.5), mean=1.02, stddev=0.0739], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.46 0.47,0.48,0.50,0.53,0.55 0.57,0.61,0.67,0.80), mean=0.51, stddev=0.0412], bias-{mean,stddev}=-0.01712,0.9795, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=4.89e+05, self-repaired-proportion=0.315101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.005 0.008,0.02,0.13,0.44,0.71 1.0,1.4,1.6,3.3), mean=0.275, stddev=0.393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.12,0.29,0.66,0.84 0.92,0.95,0.99,1.0), mean=0.374, stddev=0.273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.007 0.009,0.01,0.01,0.02), mean=0.00371, stddev=0.00246], oderiv-count=470016
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00118172, max-change=0.75, linear-params-rms=0.031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.96,0.97,0.99,1.0,1.0 1.0,1.0,1.0,1.1), mean=0.992, stddev=0.0234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.47,0.48,0.49,0.51,0.52 0.53,0.55,0.56,0.62), mean=0.495, stddev=0.0227], bias-{mean,stddev}=0.03685,0.921, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.16e+05, self-repaired-proportion=0.276996, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.02 0.03,0.08,0.32,0.77,1.1 1.3,1.7,1.9,2.7), mean=0.451, stddev=0.46], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.09 0.13,0.22,0.44,0.73,0.82 0.90,0.94,0.95,1.0), mean=0.467, stddev=0.254], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.001,0.002,0.003,0.003 0.004,0.005,0.005,0.008), mean=0.00207, stddev=0.000887], oderiv-count=464256
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00118172, max-change=0.75, linear-params-rms=0.02773, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.98,0.99,1.0,1.0 1.0,1.0,1.0,1.1), mean=0.992, stddev=0.0209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.42,0.43,0.44,0.46,0.47 0.47,0.48,0.49,0.50), mean=0.442, stddev=0.0194], bias-{mean,stddev}=-0.04709,1.069, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.23e+05, self-repaired-proportion=0.254552, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.01,0.02 0.03,0.08,0.31,0.89,1.3 2.0,2.4,2.6,2.8), mean=0.534, stddev=0.614], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.07 0.11,0.20,0.45,0.73,0.91 0.97,0.99,1.0,1.0), mean=0.474, stddev=0.277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.003,0.004 0.005,0.005,0.006,0.008), mean=0.00258, stddev=0.00109], oderiv-count=312400
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00118172, max-change=0.75, linear-params-rms=0.02773, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.95,0.96 0.97,0.98,0.99,1.0,1.0 1.0,1.0,1.0,1.1), mean=0.992, stddev=0.0223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.41 0.42,0.43,0.44,0.46,0.47 0.48,0.48,0.49,0.51), mean=0.443, stddev=0.0197], bias-{mean,stddev}=-0.07491,0.8839, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.86e+04, self-repaired-proportion=0.46602, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.006,0.02,0.20,1.1,1.7 2.5,3.0,3.4,4.5), mean=0.602, stddev=0.833], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.002 0.04,0.12,0.40,0.89,1.0 1.0,1.0,1.0,1.0), mean=0.473, stddev=0.348], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-10,3e-10,7e-10,2e-05 0.0004,0.0009,0.002,0.007,0.01 0.01,0.02,0.02,0.03), mean=0.004, stddev=0.00428], oderiv-count=102144
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000118172, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.01821, linear-params-row-norms=[ 0.26 0.32 0.29 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-10,1e-09,3e-09,4e-05 0.0008,0.003,0.01,0.04,0.06 0.07,0.08,0.09,0.11), mean=0.0213, stddev=0.0233], bias-{mean,stddev}=-2.111e-08,0.01472, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.25 0.97 0 ], oderiv-count=89488
nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/1.raw exp/displace_dev_sad_tdnn_stats/2.raw 
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.288537 tdnn2.affine:1.63215 tdnn3.affine:0.795395 tdnn4.affine:0.844881 tdnn5.affine:1.0385 output.affine:0.131163 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.0995 tdnn2.affine:22.6428 tdnn3.affine:21.6242 tdnn4.affine:23.3009 tdnn5.affine:21.298 output.affine:0.505415 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0130095 tdnn2.affine:0.0726007 tdnn3.affine:0.0367689 tdnn4.affine:0.0362661 tdnn5.affine:0.0487324 output.affine:0.269552 ]
# Accounting: time=1 threads=1
# Finished at Sat Feb 11 19:02:20 IST 2023 with status 0
