# Running on compute-0-3.local
# Started at Sat Feb 11 19:28:01 IST 2023
# nnet3-info exp/displace_dev_sad_tdnn_stats/47.raw && nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/46.raw exp/displace_dev_sad_tdnn_stats/47.raw 
nnet3-info exp/displace_dev_sad_tdnn_stats/47.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.001715, bias-{mean,stddev}=0.004393,0.07185
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000696238, max-change=0.75, linear-params-rms=0.0868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.92 0.95,0.98,1.1,1.4,1.5 1.6,1.8,1.9,3.5), mean=1.19, stddev=0.29], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.3,1.5,1.6 1.7,1.8,1.8,2.0), mean=1.38, stddev=0.149], bias-{mean,stddev}=-0.06729,0.7761, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.9e+06, self-repaired-proportion=0.742204, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.48,0.95 1.3,1.8,1.8,2.4), mean=0.254, stddev=0.457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.08,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.438, stddev=0.468], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.004,0.004,0.005,0.04,0.05 0.06,0.06,0.06,0.07), mean=0.0208, stddev=0.0196], oderiv-count=1.34916e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000696238, max-change=0.75, linear-params-rms=0.05869, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,1.0,1.0 1.0,1.1,1.3,2.0,2.9 3.5,4.6,5.4,5.5), mean=1.64, stddev=0.912], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.52,1.2,1.4 1.6,1.9,2.2,2.8), mean=0.833, stddev=0.43], bias-{mean,stddev}=-0.01718,0.9793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.03e+05, self-repaired-proportion=0.0145996, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.006,0.009 0.01,0.02,0.08,0.39,0.85 1.7,3.1,4.5,5.7), mean=0.358, stddev=0.812], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.09,0.13,0.23,0.53,0.78 0.90,0.93,0.94,0.96), mean=0.332, stddev=0.253], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.005,0.008 0.01,0.01,0.02,0.02), mean=0.00365, stddev=0.00328], oderiv-count=487066
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000696238, max-change=0.75, linear-params-rms=0.03581, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.98,0.99 1.0,1.0,1.1,1.2,1.3 1.4,1.5,1.5,1.8), mean=1.14, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.47 0.48,0.49,0.51,0.58,0.68 0.80,1.0,1.1,1.5), mean=0.557, stddev=0.128], bias-{mean,stddev}=0.03725,0.9207, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.14e+05, self-repaired-proportion=0.0011396, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.06,0.13,0.57,1.3,1.7 2.7,3.6,4.1,5.1), mean=0.828, stddev=0.884], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.10 0.12,0.21,0.46,0.72,0.81 0.87,0.89,0.90,0.93), mean=0.467, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.0009,0.001,0.001 0.001,0.001,0.002,0.003,0.004 0.004,0.005,0.006,0.007), mean=0.00211, stddev=0.00108], oderiv-count=454810
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000696238, max-change=0.75, linear-params-rms=0.03281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.98,0.99,1.0 1.0,1.0,1.1,1.3,1.4 1.5,1.6,1.8,2.1), mean=1.16, stddev=0.176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.49,0.57,0.63 0.70,0.78,0.84,1.1), mean=0.517, stddev=0.0879], bias-{mean,stddev}=-0.04708,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.15e+05, self-repaired-proportion=0.00135516, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.06,0.14,0.60,1.5,1.9 2.2,2.4,2.6,3.3), mean=0.825, stddev=0.734], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.11,0.18,0.46,0.73,0.82 0.87,0.89,0.90,0.93), mean=0.468, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.004,0.005 0.006,0.008,0.009,0.01), mean=0.00329, stddev=0.00159], oderiv-count=337600
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000696238, max-change=0.75, linear-params-rms=0.03294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.94,0.96,0.97 0.99,1.0,1.0,1.3,1.5 1.7,1.9,2.0,2.2), mean=1.15, stddev=0.239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.46,0.50,0.58,0.62 0.67,0.74,0.79,1.0), mean=0.521, stddev=0.0822], bias-{mean,stddev}=-0.07487,0.8846, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.6e+04, self-repaired-proportion=0.0571941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.07,0.43,1.3,2.0 2.5,3.0,3.5,7.0), mean=0.757, stddev=0.915], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.09,0.15,0.39,0.85,0.90 0.93,0.99,1.0,1.0), mean=0.472, stddev=0.313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0005,0.0007 0.001,0.002,0.006,0.01,0.02 0.02,0.02,0.03,0.03), mean=0.00722, stddev=0.00615], oderiv-count=92915.2
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=6.96238e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.04174, linear-params-row-norms=[ 0.76 0.76 0.42 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.004,0.006 0.01,0.02,0.05,0.09,0.12 0.14,0.16,0.19,0.21), mean=0.0586, stddev=0.0423], bias-{mean,stddev}=-8.99e-07,0.03756, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.24 0.97 0 ], oderiv-count=97036.8
nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/46.raw exp/displace_dev_sad_tdnn_stats/47.raw 
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.315707 tdnn2.affine:0.696692 tdnn3.affine:0.342833 tdnn4.affine:0.434682 tdnn5.affine:0.619445 output.affine:0.0501277 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.2158 tdnn2.affine:33.8247 tdnn3.affine:23.4828 tdnn4.affine:25.3643 tdnn5.affine:23.6152 output.affine:1.15848 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0136279 tdnn2.affine:0.0207187 tdnn3.affine:0.0146306 tdnn4.affine:0.0171759 tdnn5.affine:0.0263035 output.affine:0.0438063 ]
# Accounting: time=0 threads=1
# Finished at Sat Feb 11 19:28:01 IST 2023 with status 0
