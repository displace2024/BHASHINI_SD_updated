# Running on compute-0-1.local
# Started at Sat Feb 11 19:20:16 IST 2023
# nnet3-info exp/displace_dev_sad_tdnn_stats/34.raw && nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/33.raw exp/displace_dev_sad_tdnn_stats/34.raw 
nnet3-info exp/displace_dev_sad_tdnn_stats/34.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.001715, bias-{mean,stddev}=0.004393,0.07185
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000893493, max-change=0.75, linear-params-rms=0.08155, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.92 0.95,0.98,1.0,1.3,1.4 1.4,1.5,1.6,3.3), mean=1.13, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.3,1.4,1.5 1.5,1.6,1.7,1.8), mean=1.3, stddev=0.121], bias-{mean,stddev}=-0.07101,0.81, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.46e+06, self-repaired-proportion=0.798394, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.001,0.53,1.0 1.3,1.9,1.9,2.5), mean=0.269, stddev=0.476], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.441, stddev=0.474], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.03,0.04 0.05,0.06,0.06,0.06), mean=0.0179, stddev=0.0168], oderiv-count=1.3673e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000893493, max-change=0.75, linear-params-rms=0.05168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.99,0.99,1.0 1.0,1.0,1.2,1.7,2.5 3.0,3.9,4.4,5.2), mean=1.48, stddev=0.737], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.52,1.0,1.2 1.4,1.6,1.9,2.6), mean=0.75, stddev=0.344], bias-{mean,stddev}=-0.0172,0.9794, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.31e+05, self-repaired-proportion=0.0241573, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.009 0.01,0.02,0.07,0.35,0.64 1.4,2.2,4.1,5.3), mean=0.3, stddev=0.693], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.09,0.13,0.23,0.54,0.79 0.87,0.93,0.94,0.97), mean=0.337, stddev=0.253], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.005,0.008 0.01,0.01,0.01,0.02), mean=0.00364, stddev=0.00325], oderiv-count=456192
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000893493, max-change=0.75, linear-params-rms=0.03397, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.98 0.99,1.0,1.1,1.1,1.2 1.3,1.3,1.4,1.6), mean=1.08, stddev=0.0941], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.48,0.49,0.51,0.55,0.61 0.71,0.87,0.93,1.4), mean=0.534, stddev=0.094], bias-{mean,stddev}=0.03718,0.9206, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.01e+05, self-repaired-proportion=0.00316372, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.10,0.50,1.2,1.7 2.5,3.2,4.0,5.4), mean=0.749, stddev=0.853], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.08,0.10 0.12,0.18,0.48,0.76,0.86 0.89,0.90,0.91,0.94), mean=0.476, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.002,0.003,0.003 0.004,0.005,0.005,0.008), mean=0.00193, stddev=0.00107], oderiv-count=454349
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000893493, max-change=0.75, linear-params-rms=0.03105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.97,0.98,0.99 1.0,1.0,1.1,1.2,1.3 1.4,1.5,1.6,1.8), mean=1.1, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.43,0.45,0.47,0.52,0.58 0.62,0.69,0.73,0.91), mean=0.491, stddev=0.0661], bias-{mean,stddev}=-0.04707,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.32e+05, self-repaired-proportion=0.00355458, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.05,0.11,0.51,1.5,1.8 2.1,2.4,2.5,3.0), mean=0.781, stddev=0.724], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.10,0.17,0.48,0.77,0.87 0.90,0.92,0.93,0.94), mean=0.479, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.003,0.004 0.005,0.007,0.008,0.01), mean=0.00279, stddev=0.00144], oderiv-count=330880
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000893493, max-change=0.75, linear-params-rms=0.03098, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.96 0.98,0.99,1.0,1.2,1.3 1.5,1.6,1.7,1.9), mean=1.09, stddev=0.174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.43,0.45,0.48,0.53,0.57 0.61,0.67,0.71,0.92), mean=0.492, stddev=0.0624], bias-{mean,stddev}=-0.07477,0.8846, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.45e+04, self-repaired-proportion=0.108305, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.01 0.02,0.05,0.39,1.4,2.1 2.7,3.1,3.5,7.7), mean=0.766, stddev=1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.05 0.07,0.12,0.38,0.89,0.93 0.97,1.0,1.0,1.0), mean=0.479, stddev=0.339], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0003,0.0005,0.0006 0.0009,0.002,0.004,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.00586, stddev=0.00514], oderiv-count=89241.6
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.93493e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.03433, linear-params-row-norms=[ 0.60 0.62 0.41 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.003,0.004 0.007,0.01,0.04,0.08,0.10 0.11,0.13,0.16,0.18), mean=0.0473, stddev=0.036], bias-{mean,stddev}=-6.075e-07,0.03265, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.25 0.97 0 ], oderiv-count=96409.6
nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/33.raw exp/displace_dev_sad_tdnn_stats/34.raw 
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.367486 tdnn2.affine:0.88238 tdnn3.affine:0.417599 tdnn4.affine:0.465165 tdnn5.affine:0.687998 output.affine:0.0600583 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.5325 tdnn2.affine:30.6936 tdnn3.affine:22.7571 tdnn4.affine:24.629 tdnn5.affine:22.7258 output.affine:0.953052 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0163371 tdnn2.affine:0.0290037 tdnn3.affine:0.0183954 tdnn4.affine:0.0189297 tdnn5.affine:0.0303662 output.affine:0.0646803 ]
# Accounting: time=0 threads=1
# Finished at Sat Feb 11 19:20:16 IST 2023 with status 0
