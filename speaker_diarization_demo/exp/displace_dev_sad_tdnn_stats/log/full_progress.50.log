# Running on compute-0-4.local
# Started at Sat Feb 11 19:29:31 IST 2023
# nnet3-show-progress --use-gpu=no --verbose=2 exp/displace_dev_sad_tdnn_stats/49.raw exp/displace_dev_sad_tdnn_stats/50.raw 
nnet3-show-progress --use-gpu=no --verbose=2 exp/displace_dev_sad_tdnn_stats/49.raw exp/displace_dev_sad_tdnn_stats/50.raw 
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.001715, bias-{mean,stddev}=0.004393,0.07185
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000670025, max-change=0.75, linear-params-rms=0.001315, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,6e-05,6e-05,6e-05 6e-05,6e-05,0.002,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0124, stddev=0.0138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.05), mean=0.0204, stddev=0.00494], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 8e-08,4e-06,0.003,0.02,0.03 0.05,0.07,0.09,0.11), mean=0.0106, stddev=0.0181], bias-{mean,stddev}=-0.0003071,0.002425, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.91e+05, self-repaired-proportion=0.750327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.0001,-3e-05,-1e-06,0 0,0,0.001,0.50,0.97 1.3,1.8,1.9,2.4), mean=0.258, stddev=0.463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.004,-0.003,-0.0001,0 0,0,0.08,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.439, stddev=0.469], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.002,0.002,0.004,0.03,0.04 0.04,0.04,0.05,0.06), mean=0.0126, stddev=0.014], oderiv-count=161843
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000670025, max-change=0.75, linear-params-rms=0.001272, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.006 0.009,0.01,0.02,0.05,0.07 0.09,0.10,0.11,0.13), mean=0.0318, stddev=0.0254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.03,0.03 0.04,0.04,0.05,0.06), mean=0.0138, stddev=0.0149], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0008,0.001 0.001,0.002,0.007,0.02,0.05 0.08,0.13,0.18,0.25), mean=0.0197, stddev=0.0356], bias-{mean,stddev}=-1.55e-05,0.0001053, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=4.37e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.89,-0.69,-0.41 -0.22,-0.05,0.05,0.44,0.91 1.8,2.7,3.6,7.9), mean=0.301, stddev=0.895], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.6,-1.4,-0.92 -0.43,-0.07,0.22,0.73,0.96 1.3,1.5,1.9,2.9), mean=0.265, stddev=0.666], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0004,0.002,0.004,0.007 0.009,0.01,0.02,0.02), mean=0.00256, stddev=0.00311], oderiv-count=26726.4
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000670025, max-change=0.75, linear-params-rms=0.0006468, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.007,0.01,0.02,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0188, stddev=0.00855], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0006,0.0007,0.0009 0.001,0.002,0.004,0.01,0.02 0.02,0.03,0.03,0.04), mean=0.00729, stddev=0.00732], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0007,0.0008,0.0009 0.001,0.002,0.004,0.01,0.03 0.05,0.07,0.09,0.11), mean=0.0111, stddev=0.0175], bias-{mean,stddev}=6.776e-06,0.0001387, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 9e-05,0.0008,0.001,0.003,0.003 0.004,0.005,0.006,0.009), mean=0.00168, stddev=0.00136], oderiv-count=44236.8
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000670025, max-change=0.75, linear-params-rms=0.0007511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.008 0.01,0.01,0.03,0.03,0.04 0.04,0.05,0.05,0.05), mean=0.0248, stddev=0.0104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.002 0.003,0.005,0.01,0.02,0.02 0.02,0.02,0.03,0.03), mean=0.0104, stddev=0.00595], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.003,0.004,0.009,0.02,0.04 0.06,0.08,0.10,0.13), mean=0.017, stddev=0.0209], bias-{mean,stddev}=1.151e-06,0.0001018, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.005,0.007,0.01,0.01), mean=0.000571, stddev=0.002], oderiv-count=1600
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000670025, max-change=0.75, linear-params-rms=0.001066, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.002,0.003 0.006,0.01,0.02,0.05,0.07 0.08,0.08,0.09,0.10), mean=0.0301, stddev=0.0235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.002,0.002,0.003 0.005,0.007,0.01,0.02,0.03 0.03,0.03,0.03,0.04), mean=0.0151, stddev=0.00799], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0007,0.001 0.002,0.002,0.009,0.04,0.06 0.09,0.11,0.14,0.16), mean=0.0226, stddev=0.0307], bias-{mean,stddev}=-7.026e-06,0.0001097, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.54e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.51,-0.45,-0.30,-0.22 -0.06,-0.004,0.34,1.6,2.7 3.3,3.8,4.4,6.7), mean=0.841, stddev=1.16], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.20,-0.16,-0.10 -0.03,0.03,0.47,0.95,1.0 1.1,1.1,1.2,1.2), mean=0.483, stddev=0.418], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0006,0.009,0.02 0.02,0.03,0.04,0.05), mean=0.00483, stddev=0.00785], oderiv-count=3136
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=6.70025e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.001735, linear-params-row-norms=[ 0.03 0.03 0.002 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,3e-05,5e-05,8e-05 0.0002,0.0004,0.001,0.004,0.004 0.005,0.007,0.01,0.02), mean=0.0021, stddev=0.00215], linear-params-singular-values=[ 0.05 0.003 1e-07 ], bias-{mean,stddev}=3.446e-08,0.0005042, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.26 0.96 0 ], oderiv-count=10393.6

LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.29948 tdnn2.affine:0.650118 tdnn3.affine:0.330507 tdnn4.affine:0.429286 tdnn5.affine:0.610578 output.affine:0.0480952 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:23.3702 tdnn2.affine:34.4138 tdnn3.affine:23.6325 tdnn4.affine:25.5199 tdnn5.affine:23.8096 output.affine:1.20509 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0128429 tdnn2.affine:0.0189939 tdnn3.affine:0.0140139 tdnn4.affine:0.0168583 tdnn5.affine:0.0257137 output.affine:0.0403799 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:PrintProfile():cu-device.cc:563) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Finished at Sat Feb 11 19:29:31 IST 2023 with status 0
