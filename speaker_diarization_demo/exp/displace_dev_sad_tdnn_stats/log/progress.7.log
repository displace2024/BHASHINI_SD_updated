# Running on compute-0-3.local
# Started at Sat Feb 11 19:05:17 IST 2023
# nnet3-info exp/displace_dev_sad_tdnn_stats/7.raw && nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/6.raw exp/displace_dev_sad_tdnn_stats/7.raw 
nnet3-info exp/displace_dev_sad_tdnn_stats/7.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.001715, bias-{mean,stddev}=0.004393,0.07185
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00109441, max-change=0.75, linear-params-rms=0.0709, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.88,0.89,0.91 0.93,0.96,1.0,1.0,1.1 1.1,1.1,1.2,1.2), mean=1, stddev=0.0553], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.13, stddev=0.0489], bias-{mean,stddev}=-0.07886,0.921, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.37e+06, self-repaired-proportion=0.914668, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0001,0.68,1.2 1.5,2.1,2.1,2.6), mean=0.327, stddev=0.536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.452, stddev=0.488], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.01,0.02 0.03,0.03,0.03,0.05), mean=0.00764, stddev=0.00852], oderiv-count=1.46845e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00109441, max-change=0.75, linear-params-rms=0.03386, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.96 0.98,0.99,1.0,1.1,1.2 1.4,1.5,1.8,2.0), mean=1.07, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.46 0.47,0.49,0.51,0.57,0.63 0.68,0.76,0.86,1.1), mean=0.535, stddev=0.079], bias-{mean,stddev}=-0.01722,0.9794, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.97e+05, self-repaired-proportion=0.10758, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.006 0.009,0.01,0.06,0.23,0.53 0.76,0.87,2.1,4.9), mean=0.194, stddev=0.424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.08 0.10,0.12,0.24,0.52,0.76 0.88,0.93,0.96,1.0), mean=0.335, stddev=0.252], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.004,0.005 0.008,0.01,0.01,0.02), mean=0.00315, stddev=0.00246], oderiv-count=465984
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00109441, max-change=0.75, linear-params-rms=0.03113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.97,0.99,1.0,1.0 1.0,1.0,1.1,1.1), mean=0.996, stddev=0.0252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.46 0.47,0.48,0.50,0.51,0.52 0.54,0.55,0.57,0.65), mean=0.496, stddev=0.0254], bias-{mean,stddev}=0.03684,0.9208, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=4.85e+05, self-repaired-proportion=0.0423344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.08,0.27,0.66,1.2 1.5,2.1,2.3,3.5), mean=0.455, stddev=0.529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.10,0.15 0.18,0.25,0.47,0.76,0.86 0.89,0.91,0.92,0.95), mean=0.499, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.0009,0.001 0.001,0.001,0.001,0.002,0.002 0.003,0.004,0.004,0.005), mean=0.00148, stddev=0.000702], oderiv-count=484992
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00109441, max-change=0.75, linear-params-rms=0.02797, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.95,0.96 0.97,0.98,1.0,1.0,1.0 1.0,1.1,1.1,1.2), mean=1, stddev=0.0293], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.41 0.42,0.43,0.45,0.46,0.47 0.48,0.49,0.50,0.54), mean=0.446, stddev=0.0213], bias-{mean,stddev}=-0.04715,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=2.87e+05, self-repaired-proportion=0.0540344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.04,0.07,0.32,0.99,1.4 1.7,2.1,2.1,3.3), mean=0.538, stddev=0.579], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.10 0.14,0.21,0.46,0.82,0.88 0.92,0.93,0.95,1.0), mean=0.495, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.001,0.001 0.001,0.001,0.002,0.002,0.003 0.004,0.004,0.005,0.008), mean=0.00204, stddev=0.000933], oderiv-count=334000
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00109441, max-change=0.75, linear-params-rms=0.02778, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.94,0.95 0.96,0.97,0.99,1.0,1.0 1.0,1.1,1.1,1.2), mean=0.994, stddev=0.0312], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.42,0.43,0.44,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.444, stddev=0.0211], bias-{mean,stddev}=-0.0747,0.8839, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.08e+04, self-repaired-proportion=0.265947, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0007,0.003,0.01 0.02,0.03,0.19,0.93,1.9 2.8,3.2,3.8,6.3), mean=0.62, stddev=0.944], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.004,0.02,0.06 0.09,0.13,0.40,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.485, stddev=0.351], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,0.0001,0.0003,0.0005 0.0007,0.001,0.002,0.005,0.007 0.009,0.01,0.01,0.03), mean=0.0035, stddev=0.0037], oderiv-count=96992
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000109441, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.02071, linear-params-row-norms=[ 0.30 0.35 0.34 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0003,0.0004,0.001 0.002,0.005,0.02,0.04,0.06 0.08,0.09,0.12,0.14), mean=0.0251, stddev=0.0256], bias-{mean,stddev}=-4.563e-08,0.01682, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.25 0.97 0 ], oderiv-count=86464
nnet3-show-progress --use-gpu=no exp/displace_dev_sad_tdnn_stats/6.raw exp/displace_dev_sad_tdnn_stats/7.raw 
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.501486 tdnn2.affine:0.993102 tdnn3.affine:0.509082 tdnn4.affine:0.575299 tdnn5.affine:0.757728 output.affine:0.0806838 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:21.7769 tdnn2.affine:23.3271 tdnn3.affine:21.6711 tdnn4.affine:23.3898 tdnn5.affine:21.3196 output.affine:0.574718 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0229865 tdnn2.affine:0.0428513 tdnn3.affine:0.0235055 tdnn4.affine:0.0246207 tdnn5.affine:0.0355665 output.affine:0.143396 ]
# Accounting: time=0 threads=1
# Finished at Sat Feb 11 19:05:17 IST 2023 with status 0
