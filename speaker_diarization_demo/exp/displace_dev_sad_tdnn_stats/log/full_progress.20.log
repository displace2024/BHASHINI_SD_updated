# Running on compute-0-1.local
# Started at Sat Feb 11 19:12:17 IST 2023
# nnet3-show-progress --use-gpu=no --verbose=2 exp/displace_dev_sad_tdnn_stats/19.raw exp/displace_dev_sad_tdnn_stats/20.raw 
nnet3-show-progress --use-gpu=no --verbose=2 exp/displace_dev_sad_tdnn_stats/19.raw exp/displace_dev_sad_tdnn_stats/20.raw 
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:SelectGpuId():cu-device.cc:168) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.001715, bias-{mean,stddev}=0.004393,0.07185
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000910293, max-change=0.75, linear-params-rms=0.001755, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0001,0.0001 0.0001,0.0001,0.003,0.03,0.04 0.05,0.05,0.06,0.11), mean=0.0161, stddev=0.0189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.02,0.03,0.04 0.04,0.05,0.05,0.07), mean=0.0267, stddev=0.00838], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,6e-08 9e-08,2e-07,0.003,0.01,0.03 0.05,0.10,0.15,0.21), mean=0.011, stddev=0.0258], bias-{mean,stddev}=-0.0002329,0.004979, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.01,0.03 0.07,0.10,0.14,0.31), mean=0.0121, stddev=0.0339], oderiv-count=12208
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000910293, max-change=0.75, linear-params-rms=0.002167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.01,0.02,0.03,0.08,0.10 0.15,0.19,0.20,0.34), mean=0.0514, stddev=0.0466], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.05,0.06 0.06,0.08,0.10,0.13), mean=0.0226, stddev=0.0262], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.002 0.002,0.004,0.01,0.03,0.06 0.10,0.15,0.31,0.66), mean=0.0294, stddev=0.0628], bias-{mean,stddev}=-3.985e-05,0.0002012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=2.64e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.8,-4.6,-4.2,-2.9 -1.7,-0.74,0.02,0.67,1.5 2.6,3.5,5.8,9.2), mean=0.0146, stddev=1.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-7.0,-6.4,-4.1 -2.9,-1.4,0.16,1.6,2.5 3.4,4.3,5.1,7.3), mean=0.0213, stddev=2.33], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.006,0.009 0.02,0.02,0.03,0.07), mean=0.00401, stddev=0.00755], oderiv-count=6336
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000910293, max-change=0.75, linear-params-rms=0.001028, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.009 0.01,0.02,0.03,0.04,0.05 0.06,0.06,0.06,0.09), mean=0.0294, stddev=0.0147], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.001,0.002 0.002,0.003,0.007,0.02,0.03 0.04,0.05,0.05,0.07), mean=0.0114, stddev=0.0118], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.003,0.007,0.02,0.04 0.07,0.10,0.12,0.22), mean=0.017, stddev=0.0282], bias-{mean,stddev}=-3.342e-05,0.0002457, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.57,-0.38,-0.31,-0.16 -0.09,-0.01,0.27,1.1,1.8 2.4,3.0,3.5,6.9), mean=0.611, stddev=0.937], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.50,-0.39,-0.23,-0.17 -0.07,0.07,0.43,0.91,0.99 1.1,1.3,1.3,1.5), mean=0.463, stddev=0.425]
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000910293, max-change=0.75, linear-params-rms=0.0009293, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.008 0.01,0.02,0.03,0.04,0.05 0.05,0.06,0.07,0.10), mean=0.0296, stddev=0.0151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.004,0.006,0.01,0.02,0.02 0.03,0.03,0.04,0.06), mean=0.0126, stddev=0.00778], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.003,0.004,0.009,0.02,0.04 0.07,0.10,0.13,0.21), mean=0.0189, stddev=0.0273], bias-{mean,stddev}=-1.784e-05,0.0001678, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=2.52e+04, self-repaired-proportion=-0.0109804, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.9,-1.3,-0.70 -0.46,-0.19,0.15,1.1,1.8 2.7,3.5,4.0,5.2), mean=0.46, stddev=1.09], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.91,-0.50,-0.35 -0.18,-0.006,0.39,0.92,1.1 1.3,1.3,1.6,1.8), mean=0.448, stddev=0.52], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.0003,0.001,0.003,0.005,0.006 0.007,0.009,0.01,0.02), mean=0.00321, stddev=0.00235], oderiv-count=22800
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000910293, max-change=0.75, linear-params-rms=0.001348, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.005 0.006,0.01,0.03,0.06,0.08 0.10,0.14,0.15,0.19), mean=0.036, stddev=0.0322], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.002,0.002,0.003 0.005,0.008,0.02,0.03,0.03 0.04,0.05,0.05,0.08), mean=0.0184, stddev=0.0112], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.001,0.001 0.002,0.003,0.009,0.03,0.07 0.11,0.17,0.20,0.26), mean=0.0251, stddev=0.0412], bias-{mean,stddev}=2.006e-05,0.0002235, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=1.15e+04, self-repaired-proportion=0.159752, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.10,-0.05,-0.005 0.008,0.03,0.24,1.0,1.9 2.5,2.9,3.4,6.6), mean=0.625, stddev=0.904], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.14,-0.009,0.01 0.04,0.11,0.51,0.91,0.99 1.0,1.0,1.1,1.3), mean=0.501, stddev=0.374], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.01,0.03 0.03,0.04,0.05,0.08), mean=0.00795, stddev=0.0127], oderiv-count=1568
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=9.10293e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.002292, linear-params-row-norms=[ 0.05 0.04 0.004 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,9e-05,0.0001,0.0002 0.0003,0.0006,0.002,0.004,0.006 0.008,0.01,0.01,0.02), mean=0.00282, stddev=0.0028], linear-params-singular-values=[ 0.06 0.004 1e-07 ], bias-{mean,stddev}=4.657e-08,0.001287, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.25 0.97 0 ], oderiv-count=2128

LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.404188 tdnn2.affine:1.10709 tdnn3.affine:0.525361 tdnn4.affine:0.531109 tdnn5.affine:0.77209 output.affine:0.0635503 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:21.99 tdnn2.affine:26.9738 tdnn3.affine:22.1127 tdnn4.affine:23.9325 tdnn5.affine:21.877 output.affine:0.770357 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0184067 tdnn2.affine:0.0414954 tdnn3.affine:0.0238056 tdnn4.affine:0.0222371 tdnn5.affine:0.0353746 output.affine:0.085177 ]
LOG (nnet3-show-progress[5.5.1060~1-ae8cb]:PrintProfile():cu-device.cc:563) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Finished at Sat Feb 11 19:12:17 IST 2023 with status 0
